You need to write a function in python that return all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included).Return the obtained numbers in a comma-separated sequence on a single line.
In [10]:
def find_numbers():
    """
    Find numbers between 2000 and 3200 that are divisible by 7 but not multiples of 5.

    Returns:
    str: A comma-separated sequence of such numbers.
    """
    numbers = [str(i) for i in range(2000, 3201) if i % 7 == 0 and i % 5 != 0]
    return ','.join(numbers)

# Get the result and print it
result = find_numbers()
print(result)
2002,2009,2016,2023,2037,2044,2051,2058,2072,2079,2086,2093,2107,2114,2121,2128,2142,2149,2156,2163,2177,2184,2191,2198,2212,2219,2226,2233,2247,2254,2261,2268,2282,2289,2296,2303,2317,2324,2331,2338,2352,2359,2366,2373,2387,2394,2401,2408,2422,2429,2436,2443,2457,2464,2471,2478,2492,2499,2506,2513,2527,2534,2541,2548,2562,2569,2576,2583,2597,2604,2611,2618,2632,2639,2646,2653,2667,2674,2681,2688,2702,2709,2716,2723,2737,2744,2751,2758,2772,2779,2786,2793,2807,2814,2821,2828,2842,2849,2856,2863,2877,2884,2891,2898,2912,2919,2926,2933,2947,2954,2961,2968,2982,2989,2996,3003,3017,3024,3031,3038,3052,3059,3066,3073,3087,3094,3101,3108,3122,3129,3136,3143,3157,3164,3171,3178,3192,3199
You need code a function that calculates and returns the value according to thegiven formula:
P = Square root of [(2 * A * B)/C]
Following are the fixed values of A and B:
A is 50. B is 30.
The values of the literal C should be taken as console input to your program in a comma-separated sequence.
Example
Let us assume the following comma separated input sequence is given to the program:
100,150,180
The output of the program should be:
18,22,24
In [14]:
import math

def calculate_p():
    """
    Calculate the value of P using the formula:
    P = sqrt((2 * A * B) / C)
    
    Fixed values:
    A = 50, B = 30
    
    The values of C are taken as a comma-separated input from the user.
    
    Returns:
    str: Comma-separated results of P for each input value of C.
    """
    # Fixed values
    A = 50
    B = 30

    # Taking input for C as a comma-separated string
    input_values = input("Enter values of C (comma-separated): ")
    C_values = [int(c) for c in input_values.split(",")]

    # Calculating P for each C and collecting results
    results = [str(int(math.sqrt((2 * A * B) / C))) for C in C_values]
    return ','.join(results)
output = calculate_p()
print(output)
Enter values of C (comma-separated):  100,150,180
5,4,4
You need to write a function that takes a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world
In [16]:
def sort_words():
    """
    Takes a comma-separated sequence of words as input and sorts them alphabetically.
    
    Returns:
    str: Comma-separated sorted words.
    """
    # Taking input for the words as a comma-separated string
    input_words = input("Enter a comma-separated sequence of words: ")
    
    # Splitting the input string into a list of words
    words = input_words.split(",")
    
    # Sorting the list alphabetically
    sorted_words = sorted(words)
    
    # Joining the sorted list back into a comma-separated string
    return ",".join(sorted_words)

# Run the function and print the result
output = sort_words()
print(output)
Enter a comma-separated sequence of words:  without,hello,bag,world
bag,hello,without,world
You need to write a program that takes sequence of lines as input and prints the lines after making all characters in the sentence capitalized.
Suppose the following input is supplied to the program:
Hello world
Practice makes perfect
Then, the output should be:
In [18]:
def capitalize_lines():
    """
    Takes a sequence of lines as input and prints each line with all characters capitalized.
    """
    print("Enter lines of text (press Enter twice to finish):")
    lines = []
    
    while True:
        line = input()  # Take input line by line
        if line.strip() == "":  # Exit on an empty line
            break
        lines.append(line.upper())  # Convert the line to uppercase and add to the list
    
    # Print the capitalized lines
    for capitalized_line in lines:
        print(capitalized_line)

# Run the function
capitalize_lines()
Enter lines of text (press Enter twice to finish):
 Hello world Practice makes perfect
 
HELLO WORLD PRACTICE MAKES PERFECT
You need to write a function that counts the number of vowels in a given sentence as input from console.
Suppose the following input is supplied to the program:
Hello world
Practice makes perfect
Then, the output should be:
a appeared 2 times
e appeared 5 times
i appeared 1 time
o appeared 2 times
u appeared 0 timeS
PRACTICE MAKES PERFECT
In [20]:
def count_vowels():
    """
    Counts the number of each vowel (a, e, i, o, u) in the given sentence.
    """
    # Taking input from the user
    sentence = input("Enter a sentence: ")

    # Convert the sentence to lowercase for case-insensitive counting
    sentence_lower = sentence.lower()

    # Define vowels
    vowels = "aeiou"
    
    # Count each vowel in the sentence
    vowel_counts = {vowel: sentence_lower.count(vowel) for vowel in vowels}

    # Print the count of each vowel
    for vowel, count in vowel_counts.items():
        print(f"{vowel} appeared {count} time{'s' if count != 1 else ''}")
    
    # Print the original sentence in uppercase
    print(sentence.upper())

# Run the function
count_vowels()
Enter a sentence:  Hello world Practice makes perfect
a appeared 2 times
e appeared 5 times
i appeared 1 time
o appeared 2 times
u appeared 0 times
HELLO WORLD PRACTICE MAKES PERFECT
You need write a function that traces and makes a list of all such numbers from1000 to 3000 in which all the digits are even numbers.
In [27]:
def find_even_digit_numbers():
    """
    Finds all numbers between 1000 and 3000 where all digits are even.
    """
    even_digit_numbers = []

    # Iterate through the numbers from 1000 to 3000
    for num in range(1000, 3001):
        # Convert the number to a string and check if all digits are even
        if all(int(digit) % 2 == 0 for digit in str(num)):
            even_digit_numbers.append(str(num))

    # Return the list as a comma-separated string
    return ','.join(even_digit_numbers)

# Run the function and print the result
output = find_even_digit_numbers()
print(output)
2000,2002,2004,2006,2008,2020,2022,2024,2026,2028,2040,2042,2044,2046,2048,2060,2062,2064,2066,2068,2080,2082,2084,2086,2088,2200,2202,2204,2206,2208,2220,2222,2224,2226,2228,2240,2242,2244,2246,2248,2260,2262,2264,2266,2268,2280,2282,2284,2286,2288,2400,2402,2404,2406,2408,2420,2422,2424,2426,2428,2440,2442,2444,2446,2448,2460,2462,2464,2466,2468,2480,2482,2484,2486,2488,2600,2602,2604,2606,2608,2620,2622,2624,2626,2628,2640,2642,2644,2646,2648,2660,2662,2664,2666,2668,2680,2682,2684,2686,2688,2800,2802,2804,2806,2808,2820,2822,2824,2826,2828,2840,2842,2844,2846,2848,2860,2862,2864,2866,2868,2880,2882,2884,2886,2888
You need to write a code which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not.The numbers that are divisible by 5 are to be printed in a comma separated sequence.
Example:
0100,0011,1010,1001
Then the output should be:
1010
In [31]:
def find_even_digit_numbers():
    """
    Finds all numbers between 1000 and 3000 where all digits are even.
    """
    even_digit_numbers = []

    # Iterate through the numbers from 1000 to 3000
    for num in range(1000, 3001):
        # Convert the number to a string and check if all digits are even
        if all(int(digit) % 2 == 0 for digit in str(num)):
            even_digit_numbers.append(str(num))

    # Return the list as a comma-separated string
    return ','.join(even_digit_numbers)

# Run the function and print the result
output = find_even_digit_numbers()
print(output)
2000,2002,2004,2006,2008,2020,2022,2024,2026,2028,2040,2042,2044,2046,2048,2060,2062,2064,2066,2068,2080,2082,2084,2086,2088,2200,2202,2204,2206,2208,2220,2222,2224,2226,2228,2240,2242,2244,2246,2248,2260,2262,2264,2266,2268,2280,2282,2284,2286,2288,2400,2402,2404,2406,2408,2420,2422,2424,2426,2428,2440,2442,2444,2446,2448,2460,2462,2464,2466,2468,2480,2482,2484,2486,2488,2600,2602,2604,2606,2608,2620,2622,2624,2626,2628,2640,2642,2644,2646,2648,2660,2662,2664,2666,2668,2680,2682,2684,2686,2688,2800,2802,2804,2806,2808,2820,2822,2824,2826,2828,2840,2842,2844,2846,2848,2860,2862,2864,2866,2868,2880,2882,2884,2886,2888
Write a program that accepts a sentence and calculate the number of letters and digits.
Suppose the following input is supplied to the program:
hello world! 123
Then, the output should be:
LETTERS 10
DIGITS 3
In [33]:
def count_letters_and_digits():
    """
    Accepts a sentence and calculates the number of letters and digits in it.
    """
    # Taking input from the user
    sentence = input("Enter a sentence: ")
    
    # Initialize counters for letters and digits
    letters = 0
    digits = 0
    
    # Loop through each character in the sentence
    for char in sentence:
        if char.isalpha():  # Check if the character is a letter
            letters += 1
        elif char.isdigit():  # Check if the character is a digit
            digits += 1
    
    # Print the result
    print(f"LETTERS {letters}")
    print(f"DIGITS {digits}")

# Run the function
count_letters_and_digits()
Enter a sentence:  hello world! 123
LETTERS 10
DIGITS 3
In [ ]:
